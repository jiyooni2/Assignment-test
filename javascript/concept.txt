모든 컴포넌트에서 setState, render 함수를 정의해야함, state에 따라 컴포넌트가 rendering 되야하므로

const a = new A(); => 호출과 동시에 객체 생성

this.render=()=>{} => 호출하는게 아님, 내부적으로 메소드 정의


    e.target.closet : 현재 클릭한 요소와 제일 인접한 요소 get
    e.target.tagName==="" 이런식으로도 쓸 수 있음
    data-id가 아닌 value에다가 값을 넣고 활용할 수도 있음

    element.innerHTML
    element.className
    document.createElement()

    display:none => 보이지 않음, 공간 차지하지도, 박스가 생성되지도 않음

개별 element의 css 수정
    element.style.display = 'block':'none'

각 모듈의 역할을 잘 생각하고, 각 모듈이 독립적으로 운영될수 있도록 하기

캐싱같은 경우, 모든 데이터를 중앙제어하고 있는, 모든 데이터가 모여있는 App에서 하는게 제일 효율적
캐싱의 대상은 당연히 nodes, 불러오는 데이터에 대한 캐싱

화면을 직접 렌더링하는 게 아니라, 어떠한 상태값을 정의하고, 상태가 변경이 될 때마다 UI가 업데이트
애플리케이션의 상태를 추상화하며, 상태를 기반으로 렌더링


assets의 src는 index.html의 위치 기준이다!!!

fetch시 response의 ok가 true인지 반드시 확인, ok가 아니면 throw new Error("fail");

새로고침되어도 그대로 되는 것 => localStorage 사용
styles.css 인것 주의하자
querySelector가 안먹을 때는 렌더링 된 곳이 어디인가, 부른 곳이 어디인지 반드시 체크하자

API호출이 이상할 경우 절대경로로 바꿔보자

SPA routing => location 사용
location.href 등을 이용해 URL 변경처리를 하면, 브라우저는 해당 페이지로 이동하면서 페이지를 불러옴
history.pushState를 이용하면 URL만 업데이트 하면서 웹 브라우저의 기본적인 페이지 이동처리가 되는 것을 방지
페이지가 변경되는 부분만 새로 그리도록 처리!, 화면 새로고침 없이 이동처리를 하려면
1. 이동할 페이지 URL을 history.pushState를 통해 변경
2. App.js의 this.route함수 실행

뒤로가기 발생시 popstate eventListener 등록 필요


localStorage > 모든게, array도 다 string으로 저장된다. 당연하게도
    const value = localStorage.getItem(key);
    JSON.parse(value);
    
    parsing을 거치고 난 뒤에는, '[{},{}]'이런 구조가, JSON으로 바뀜

    localStorage.setItem(key,JSON.stringify(value));

    localStorage.removeItem(key);

this.state 안에는 되도록 큰 단위로 넣어 보는게 좋다. 다른데서 어디서 어떻게 쓸지 모르기 때문에
각 컴포넌트의 state에서 쓰는 변수 이름을 꼭 적어두자
자신이 쓴 구조를 헷갈리기 시작하는 순간부터는 답도 없다

option태그의 value 속성이 있음
만약, 태그를 쓰다가 이벤트 리스너에서 어떻게 쓸 지 모르겠으면, 구글링
tag의 속성값이 뭐뭐 있는지 관찰 => mdn option properties

<reduce 잊지 말자>
reduce함수
    args : (acc,cur,idx,src) : (누산기,현재값,현재 인덱스, 원본배열)
            acc와 cur만 필수, 나머지 optional
    arr.reduce(callback[,initialValue])
        initialValue안주면 배열의 첫번째 값 사용

Event
    입력받는 이벤트
        input, change
        keyup

특정 element를 알고 싶을 때
$component.addEventListener("change", (e) => {
    if (e.target.tagName === "INPUT") {

    }
}

const $node = e.target.closest("....");
 
